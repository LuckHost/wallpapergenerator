import java.awt.image.BufferedImage
import java.io.File
import java.io.IOException
import javax.imageio.ImageIO
import kotlin.math.floor

object PerlinNoiseGenerator {
    private const val WIDTH = 1000
    private const val HEIGHT = 1000

    private const val P = 8
    private val permutation = intArrayOf(
        151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30,
        69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62,
        94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136,
        171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122,
        60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161,
        1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86,
        164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126,
        255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213,
        119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253,
        19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193,
        238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
        181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 114, 131, 184, 108, 127, 189,
        14, 15, 12, 179, 3, 249, 112, 217, 22, 154, 68, 105, 41, 97, 191, 222, 97, 61, 126, 90,
        18, 78, 61, 23, 70, 8, 165, 131, 214, 48, 129, 208, 75, 233, 79, 134, 26, 139, 41, 115,
        181, 142, 138, 179, 51, 186, 151, 122, 235, 165, 77, 210, 145, 155, 6, 73, 159, 185, 98, 143,
        55, 11, 159, 168, 31, 33, 121, 25, 152, 44, 150, 11, 123, 89, 19, 224, 43, 204, 161, 158, 109,
        173, 198, 66, 176, 4, 115, 152, 195, 102, 250, 77, 120, 186, 103, 220, 89, 113, 7, 207, 37,
        213, 185, 175, 56, 189, 189, 74, 41, 90, 128, 170, 247, 120, 145, 201, 184, 63, 220, 100, 43,
        130, 179, 199, 104, 232, 125, 96, 209, 146, 95, 236, 194, 35, 28, 142, 81, 198, 226, 105, 79,
        207, 25, 137, 191, 235, 23, 79, 209, 94, 70, 21, 41, 155, 231, 94, 162, 102, 140, 83, 77,
        20, 252, 172, 253, 236, 220, 30, 202, 223, 220, 80, 39, 142, 109, 97, 47, 190, 149, 6, 139,
        252, 76, 184, 219, 185, 167, 242, 166, 201, 238, 177, 11, 22, 181, 59, 95, 48, 127, 119, 114,
        59, 255, 151, 207, 159, 88, 129, 228, 52, 79, 219, 130, 113, 215, 61, 52, 172, 27, 6, 186,
        48, 33, 90, 178, 152, 243, 156, 67, 180, 204, 48, 160, 226, 75, 71, 191, 230, 56, 203, 53,
        119, 130, 213, 228, 79, 32, 7, 83, 88, 76, 143, 146, 196, 50, 134, 64, 144, 215, 156, 78,
        131, 22, 208, 237, 190, 176, 180, 81, 29, 50, 154, 206, 121, 118, 183, 67, 247, 12, 169, 171,
        66, 173, 204, 190, 96, 34, 217, 72, 117, 8, 201, 115, 188, 102, 5, 136, 69, 83, 159, 240,
        11, 72, 78,54, 46, 139, 135, 233, 172, 106, 62, 209, 230, 159, 62, 70, 252, 129, 141, 250,
        64, 167, 203, 197, 166, 56, 38, 247, 209, 248, 1, 229, 121, 13, 215, 103, 167, 206, 168, 147,
        250, 107, 43, 226, 15, 179, 153, 97, 20, 238, 208, 81, 199, 226, 138, 120, 95, 67, 31, 201,
        236, 197, 116, 104, 60, 251, 66, 153, 187, 231, 29, 97, 75, 163, 169, 157, 222, 71, 230, 91,
        123, 205, 227, 134, 236, 155, 228, 119, 116, 116, 63, 18, 113, 222, 187, 101, 116, 92, 248, 226,
        54, 83, 41, 63, 54, 161, 102, 121, 134, 81, 89, 82, 194, 97, 83, 75, 228
    )

    fun noise(x: Double, y: Double): Double {
        var x = x
        var y = y
        val X = floor(x).toInt() and 255
        val Y = floor(y).toInt() and 255

        x -= floor(x)
        y -= floor(y)

        val u = fade(x)
        val v = fade(y)

        val A = permutation[X] + Y
        val AA = permutation[A]
        val AB = permutation[A + 1]
        val B = permutation[X + 1] + Y
        val BA = permutation[B]
        val BB = permutation[B + 1]

        return lerp(
            v, lerp(
                u, grad(permutation[AA], x, y),
                grad(permutation[BA], x - 1, y)
            ),
            lerp(
                u, grad(permutation[AB], x, y - 1),
                grad(permutation[BB], x - 1, y - 1)
            )
        )
    }

    private fun fade(t: Double): Double {
        return t * t * t * (t * (t * 6 - 15) + 10)
    }

    private fun lerp(t: Double, a: Double, b: Double): Double {
        return a + t * (b - a)
    }

    private fun grad(hash: Int, x: Double, y: Double): Double {
        val h = hash and 15
        val u = if (h < 8) x else y
        val v = if (h < 4) y else if (h == 12 || h == 14) x else 0.0
        return (if ((h and 1) == 0) u else -u) + (if ((h and 2) == 0) v else -v)
    }

    @JvmStatic
    fun main(args: Array<String>) {
        val image = BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB)

        for (i in 0 until WIDTH) {
            for (j in 0 until HEIGHT) {
                val noiseValue = noise(i * 0.03, j * 0.03) // Параметр можно менять для изменения масштаба шума
                val color = ((noiseValue + 1) * 127.5).toInt() // Преобразование от -1;1 к 0;255
                image.setRGB(
                    i,
                    j,
                    (color shl 16) or (color shl 8) or color
                ) // Установка цвета пикселя (R, G, B одинаковые)
            }
        }

        val output = File("perlin_noise.png")
        try {
            ImageIO.write(image, "png", output)
            println("Изображение успешно сохранено в файл: " + output.absolutePath)
        } catch (e: IOException) {
            System.err.println("Ошибка при сохранении изображения: " + e.message)
        }
    }
}